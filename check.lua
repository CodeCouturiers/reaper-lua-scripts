-- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –º–∞—Å—Ç–µ—Ä–∏–Ω–≥–æ–º
local function Main()
  local project = 0
  local issues = {}
  local warnings = {}
  
  -- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫
  local LIMITS = {
    PEAK_CEILING = -1.0,    -- True Peak –ø—Ä–µ–¥–µ–ª
    MAX_RMS = -12.0,        -- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π RMS
    MIN_RMS = -18.0,        -- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π RMS
    MAX_SWIDTH = 1.0,       -- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç–µ—Ä–µ–æ
    MIN_CORR = 0.0,         -- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    PAN_LIMIT = 0.9,        -- –ü—Ä–µ–¥–µ–ª –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è
  }

  -- –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ dB
  local function toDB(value)
    if value <= 0 then return -math.huge end
    return 20 * math.log(value, 10)
  end

  -- –ü–æ–ª—É—á–µ–Ω–∏–µ RMS –∑–Ω–∞—á–µ–Ω–∏—è
  local function getRMSValue(track, take_index)
    local rms_l = reaper.Track_GetPeakHoldDB(track, take_index * 2, true)
    local rms_r = reaper.Track_GetPeakHoldDB(track, take_index * 2 + 1, true)
    if rms_l == -math.huge or rms_r == -math.huge then return -math.huge end
    return (rms_l + rms_r) / 2
  end

  -- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Ñ–∞–∑
  local function getPhaseCorrelation(track)
    local retval, corrValue = reaper.Track_GetPeakHoldDB(track, 2, false)
    return corrValue or 0
  end

  -- –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞ —Ç—Ä–µ–∫–µ
  local function analyzeFX(track, track_name)
    local fx_count = reaper.TrackFX_GetCount(track)
    if fx_count == 0 then return end
    
    local has_limiter = false
    local last_eq = -1
    local last_comp = -1
    
    for fx = 0, fx_count - 1 do
      local retval, fx_name = reaper.TrackFX_GetFXName(track, fx, "")
      local enabled = reaper.TrackFX_GetEnabled(track, fx)
      
      -- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞
      if not enabled then
        table.insert(warnings, string.format("üîå %s: –û—Ç–∫–ª—é—á–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç '%s'", track_name, fx_name))
      end
      
      -- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
      local fx_lower = fx_name:lower()
      if fx_lower:find("eq") then
        last_eq = fx
      elseif fx_lower:find("comp") then
        last_comp = fx
      elseif fx_lower:find("limit") then
        has_limiter = true
      end
    end
    
    -- –ê–Ω–∞–ª–∏–∑ —Ü–µ–ø–æ—á–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    if last_eq > last_comp and last_comp ~= -1 then
      table.insert(warnings, string.format("‚ö° %s: EQ –ø–æ—Å–ª–µ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ", track_name))
    end
    
    return has_limiter
  end

  -- –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–∫–∞
  local function analyzeTrack(track, is_master)
    local retval, track_name = reaper.GetTrackName(track)
    if is_master then track_name = "MASTER" end
    
    -- –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    local volume = reaper.GetMediaTrackInfo_Value(track, "D_VOL")
    local pan = reaper.GetMediaTrackInfo_Value(track, "D_PAN")
    local width = reaper.GetMediaTrackInfo_Value(track, "D_WIDTH")
    local is_muted = reaper.GetMediaTrackInfo_Value(track, "B_MUTE") == 1
    local is_soloed = reaper.GetMediaTrackInfo_Value(track, "I_SOLO") > 0
    
    -- –ò–∑–º–µ—Ä–µ–Ω–∏—è
    local peak_val = reaper.Track_GetPeakInfo(track, 0)
    local rms = getRMSValue(track, 0)
    local correlation = getPhaseCorrelation(track)
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω–µ–π
    if peak_val > 10^(LIMITS.PEAK_CEILING/20) then
      table.insert(issues, string.format("üìä %s: –ü–∏–∫–∏ –≤—ã—à–µ %.1f dB (%.1f dB)", 
        track_name, LIMITS.PEAK_CEILING, toDB(peak_val)))
    end
    
    if volume > 1.0 then
      table.insert(issues, string.format("üîä %s: –ì—Ä–æ–º–∫–æ—Å—Ç—å –≤—ã—à–µ 0 dB (%.1f dB)", 
        track_name, toDB(volume)))
    end
    
    -- RMS –ø—Ä–æ–≤–µ—Ä–∫–∏
    if rms > LIMITS.MAX_RMS then
      table.insert(issues, string.format("üìà %s: RMS —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π (%.1f dB)", 
        track_name, rms))
    elseif rms < LIMITS.MIN_RMS and rms > -math.huge then
      table.insert(warnings, string.format("üìâ %s: RMS —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π (%.1f dB)", 
        track_name, rms))
    end
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–µ—Ä–µ–æ
    if math.abs(pan) > LIMITS.PAN_LIMIT then
      table.insert(warnings, string.format("‚ÜîÔ∏è %s: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ (%.0f%%)", 
        track_name, pan * 100))
    end
    
    if width > LIMITS.MAX_SWIDTH then
      table.insert(warnings, string.format("‚ÜîÔ∏è %s: –°–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∞—è —Å—Ç–µ—Ä–µ–æ-–±–∞–∑–∞ (%.0f%%)", 
        track_name, width * 100))
    end
    
    -- –§–∞–∑–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    if correlation < LIMITS.MIN_CORR then
      table.insert(warnings, string.format("‚ö†Ô∏è %s: –í–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–∞–∑–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (%.2f)", 
        track_name, correlation))
    end
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –º—å—é—Ç–∞/—Å–æ–ª–æ
    if is_muted then
      table.insert(issues, string.format("üîá %s: –í–∫–ª—é—á–µ–Ω –º—å—é—Ç", track_name))
    end
    if is_soloed then
      table.insert(issues, string.format("üëÇ %s: –í–∫–ª—é—á–µ–Ω–æ —Å–æ–ª–æ", track_name))
    end
    
    return analyzeFX(track, track_name)
  end

  -- –ê–Ω–∞–ª–∏–∑ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  local function analyzeProject()
    local master = reaper.GetMasterTrack(project)
    local track_count = reaper.CountTracks(project)
    local has_master_limiter = false
    
    -- –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏
    for i = 0, track_count - 1 do
      local track = reaper.GetTrack(project, i)
      analyzeTrack(track, false)
    end
    
    -- –ó–∞—Ç–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Ç–µ—Ä
    has_master_limiter = analyzeTrack(master, true)
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏–º–∏—Ç–µ—Ä–∞ –Ω–∞ –º–∞—Å—Ç–µ—Ä–µ
    if not has_master_limiter then
      table.insert(warnings, "‚ö†Ô∏è MASTER: –ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏–º–∏—Ç–µ—Ä –Ω–∞ –º–∞—Å—Ç–µ—Ä-—à–∏–Ω–µ")
    end
  end

  -- –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
  analyzeProject()

  -- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
  local report = ""
  
  -- –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
  if #issues > 0 then
    report = report .. "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:\n\n"
    for _, issue in ipairs(issues) do
      report = report .. issue .. "\n"
    end
    report = report .. "\n"
  end
  
  -- –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  if #warnings > 0 then
    report = report .. "‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:\n\n"
    for _, warning in ipairs(warnings) do
      report = report .. warning .. "\n"
    end
    report = report .. "\n"
  end
  
  -- –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç
  if #issues == 0 and #warnings == 0 then
    report = "‚úÖ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –ú–ê–°–¢–ï–†–ò–ù–ì–£!\n\n"
    report = report .. "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º:\n"
    report = report .. "1. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ\n"
    report = report .. "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∞—Ö/–Ω–∞—É—à–Ω–∏–∫–∞—Ö\n"
    report = report .. "3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∏–∫–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç -1 dB\n"
    report = report .. "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–∑–æ–≤—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é\n"
    report = report .. "5. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–æ–µ–∫—Ç–∞\n"
    report = report .. "6. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞\n"
    report = report .. "7. –ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞\n"
  end
  
  -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  reaper.ShowMessageBox(report, "üéöÔ∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –º–∞—Å—Ç–µ—Ä–∏–Ω–≥–æ–º", 0)
end

-- –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã
reaper.Undo_BeginBlock()
Main()
reaper.Undo_EndBlock("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –º–∞—Å—Ç–µ—Ä–∏–Ω–≥–æ–º", -1)