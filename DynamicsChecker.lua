-- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–Ω–∞–º–∏–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
local dynamics_targets = {
  vocal = {
    rms_min = -24, rms_max = -12,
    peak_min = -6, peak_max = -0.5,
    description = "–í–æ–∫–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–±–æ—Ä—á–∏–≤—ã–º –∏ —ç–∫—Å–ø—Ä–µ—Å—Å–∏–≤–Ω—ã–º",
    compression_tips = {
      "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ–ø–æ–ª–æ—Å–Ω—É—é –∫–æ–º–ø—Ä–µ—Å—Å–∏—é –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤",
      "Ratio 2:1 - 4:1 –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏",
      "–ë—ã—Å—Ç—Ä–∞—è –∞—Ç–∞–∫–∞ (1-5ms) –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–∏–∫–æ–≤",
      "–°—Ä–µ–¥–Ω–µ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (50-100ms) –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"
    }
  },
  drums = {
    rms_min = -18, rms_max = -10,
    peak_min = -4, peak_max = -0.5,
    description = "–£–¥–∞—Ä–Ω—ã–µ —Ç—Ä–µ–±—É—é—Ç —á—ë—Ç–∫–æ–π –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π –¥–∏–Ω–∞–º–∏–∫–∏",
    compression_tips = {
      "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∫–æ–º–ø—Ä–µ—Å—Å–∏—è –¥–ª—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏",
      "Ratio 4:1 - 8:1 –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–∏–∫–æ–≤",
      "–ë—ã—Å—Ç—Ä–∞—è –∞—Ç–∞–∫–∞ (0.1-1ms) –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏",
      "–ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (10-50ms) –¥–ª—è —ç–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç–∏"
    }
  }
  -- –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏...
}

-- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
local instrument_patterns = {
  vocal = {"voc", "–≤–æ–∫", "lead", "–ª–∏–¥", "voice", "–≥–æ–ª–æ—Å"},
  drums = {"drum", "—É–¥–∞—Ä", "beat", "–±–∏—Ç"},
  bass = {"bass", "–±–∞—Å"},
  guitar = {"git", "–≥–∏—Ç"},
  synth = {"synth", "—Å–∏–Ω", "pad", "–ø—ç–¥"},
  keys = {"key", "–∫–ª–∞–≤", "piano", "–ø–∏–∞–Ω"}
}

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
local function detectInstrumentType(track_name)
  local lower_name = string.lower(track_name)
  for type, patterns in pairs(instrument_patterns) do
    for _, pattern in ipairs(patterns) do
      if string.match(lower_name, pattern) then
        return type
      end
    end
  end
  return nil
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º
local function analyzePhaseIssues(track)
  local phase_problems = false
  local correlation = reaper.Track_GetPeakHoldDB(track, 2, false)
  if correlation and correlation < 0 then
    phase_problems = true
  end
  return phase_problems
end

function AnalyzeTrackDynamics(track)
  local retval, track_name = reaper.GetTrackName(track)
  
  -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
  local cur_pos = reaper.GetCursorPosition()
  reaper.PreventUIRefresh(1)
  
  -- –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–∫–∞
  local peak_val = reaper.Track_GetPeakInfo(track, 0)
  local rms_l = reaper.Track_GetPeakHoldDB(track, 0, true)
  local rms_r = reaper.Track_GetPeakHoldDB(track, 1, true)
  local avg_rms = (rms_l + rms_r) / 2
  
  -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–∑—É
  local phase_issues = analyzePhaseIssues(track)
  
  -- –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä–æ–º–∫–æ—Å—Ç–∏
  local volume = reaper.GetMediaTrackInfo_Value(track, "D_VOL")
  local pan = reaper.GetMediaTrackInfo_Value(track, "D_PAN")
  local width = reaper.GetMediaTrackInfo_Value(track, "D_WIDTH")
  
  -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
  local track_type = detectInstrumentType(track_name)
  
  -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ —Ç—Ä–µ–∫–µ
  local fx_count = reaper.TrackFX_GetCount(track)
  local has_compressor = false
  local has_limiter = false
  
  for fx = 0, fx_count - 1 do
    local retval, fx_name = reaper.TrackFX_GetFXName(track, fx, "")
    local fx_lower = string.lower(fx_name)
    if string.match(fx_lower, "comp") then
      has_compressor = true
    elseif string.match(fx_lower, "limit") then
      has_limiter = true
    end
  end
  
  -- –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
  local result = {
    name = track_name,
    type = track_type,
    peak = 20 * math.log(peak_val, 10),
    rms = avg_rms,
    volume = 20 * math.log(volume, 10),
    pan = pan,
    width = width,
    phase_issues = phase_issues,
    has_compressor = has_compressor,
    has_limiter = has_limiter
  }
  
  return result
end

function GenerateReport(analysis_results)
  local report = "üìä –ê–ù–ê–õ–ò–ó –î–ò–ù–ê–ú–ò–ö–ò\n\n"
  
  for _, result in ipairs(analysis_results) do
    report = report .. string.format("üéµ –î–æ—Ä–æ–∂–∫–∞: %s\n", result.name)
    report = report .. string.format("üìà –ü–∏–∫–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: %.1f dB\n", result.peak)
    report = report .. string.format("üìä RMS —É—Ä–æ–≤–µ–Ω—å: %.1f dB\n", result.rms)
    report = report .. string.format("üéöÔ∏è –ì—Ä–æ–º–∫–æ—Å—Ç—å: %.1f dB\n", result.volume)
    
    if math.abs(result.pan) > 0.5 then
      report = report .. string.format("‚ÜîÔ∏è –ü–∞–Ω–æ—Ä–∞–º–∞: %.0f%%\n", result.pan * 100)
    end
    
    if result.width ~= 1.0 then
      report = report .. string.format("‚ÜîÔ∏è –®–∏—Ä–∏–Ω–∞ —Å—Ç–µ—Ä–µ–æ: %.0f%%\n", result.width * 100)
    end
    
    if result.phase_issues then
      report = report .. "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∞–∑–æ–π!\n"
    end
    
    -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ñ—Ñ–µ–∫—Ç–∞—Ö
    if result.has_compressor then
      report = report .. "üî∏ –ï—Å—Ç—å –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä\n"
    else
      report = report .. "‚ö†Ô∏è –ù–µ—Ç –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞\n"
    end
    
    if result.has_limiter then
      report = report .. "üî∏ –ï—Å—Ç—å –ª–∏–º–∏—Ç–µ—Ä\n"
    end
    
    if result.type and dynamics_targets[result.type] then
      local target = dynamics_targets[result.type]
      report = report .. "\nüìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
      report = report .. target.description .. "\n"
      
      -- –ü—Ä–æ–≤–µ—Ä–∫–∞ RMS
      if result.rms < target.rms_min then
        report = report .. string.format("‚ö†Ô∏è RMS —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π (%.1f dB). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–¥–Ω—è—Ç—å –Ω–∞ %.1f dB\n", 
          result.rms, target.rms_min - result.rms)
      elseif result.rms > target.rms_max then
        report = report .. string.format("‚ö†Ô∏è RMS —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π (%.1f dB). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∏–∑–∏—Ç—å –Ω–∞ %.1f dB\n",
          result.rms, result.rms - target.rms_max)
      end
      
      -- –°–æ–≤–µ—Ç—ã –ø–æ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏
      if not result.has_compressor then
        report = report .. "\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏:\n"
        for _, tip in ipairs(target.compression_tips) do
          report = report .. "  ‚Ä¢ " .. tip .. "\n"
        end
      end
    end
    
    report = report .. "\n" .. string.rep("‚îÅ", 50) .. "\n\n"
  end
  
  return report
end

function Main()
  local project = 0
  local track_count = reaper.CountTracks(project)
  local results = {}
  
  -- –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑
  reaper.PreventUIRefresh(1)
  reaper.Undo_BeginBlock()
  
  for i = 0, track_count - 1 do
    local track = reaper.GetTrack(project, i)
    local analysis = AnalyzeTrackDynamics(track)
    table.insert(results, analysis)
  end
  
  -- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç
  local report = GenerateReport(results)
  reaper.ShowMessageBox(report, "–ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏", 0)
  
  reaper.Undo_EndBlock("–ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏", -1)
  reaper.PreventUIRefresh(-1)
  reaper.UpdateArrange()
end

-- –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
Main()