desc: 31-Band Equal Loudness Compensator
//tags: processing, equalizer
//author: Custom EQ Script

slider1:0<0,100,1>Mix (%)
slider2:-12<-60,12,0.1>Output Level (dB)

// 31 bands ISO with wider ranges
slider3:1<0,4,0.01>20 Hz
slider4:1<0,4,0.01>25 Hz
slider5:1<0,4,0.01>31.5 Hz
slider6:1<0,4,0.01>40 Hz
slider7:1<0,4,0.01>50 Hz
slider8:1<0,4,0.01>63 Hz
slider9:1<0,4,0.01>80 Hz
slider10:1<0,4,0.01>100 Hz
slider11:1<0,4,0.01>125 Hz
slider12:1<0,4,0.01>160 Hz
slider13:1<0,4,0.01>200 Hz
slider14:1<0,4,0.01>250 Hz
slider15:1<0,4,0.01>315 Hz
slider16:1<0,4,0.01>400 Hz
slider17:1<0,4,0.01>500 Hz
slider18:1<0,4,0.01>630 Hz
slider19:1<0,4,0.01>800 Hz
slider20:1<0,4,0.01>1000 Hz
slider21:1<0,4,0.01>1250 Hz
slider22:1<0,4,0.01>1600 Hz
slider23:1<0,4,0.01>2000 Hz
slider24:1<0,4,0.01>2500 Hz
slider25:1<0,4,0.01>3150 Hz
slider26:1<0,4,0.01>4000 Hz
slider27:1<0,4,0.01>5000 Hz
slider28:1<0,4,0.01>6300 Hz
slider29:1<0,4,0.01>8000 Hz
slider30:1<0,4,0.01>10000 Hz
slider31:1<0,4,0.01>12500 Hz
slider32:1<0,4,0.01>16000 Hz
slider33:1<0,4,0.01>20000 Hz

@init
freqs = 0;
bufs = 1000;
gains = 2000;
eq_curve = 3000;

// Initialize frequencies
freqs[0] = 20; freqs[1] = 25; freqs[2] = 31.5; freqs[3] = 40; freqs[4] = 50;
freqs[5] = 63; freqs[6] = 80; freqs[7] = 100; freqs[8] = 125; freqs[9] = 160;
freqs[10] = 200; freqs[11] = 250; freqs[12] = 315; freqs[13] = 400; freqs[14] = 500;
freqs[15] = 630; freqs[16] = 800; freqs[17] = 1000; freqs[18] = 1250; freqs[19] = 1600;
freqs[20] = 2000; freqs[21] = 2500; freqs[22] = 3150; freqs[23] = 4000; freqs[24] = 5000;
freqs[25] = 6300; freqs[26] = 8000; freqs[27] = 10000; freqs[28] = 12500; freqs[29] = 16000;
freqs[30] = 20000;

function calculate_loudness_compensation(freq)
(
    // Расчет компенсации на основе кривых равной громкости
    freq < 100 ? (3.5 - (log10(freq)/log10(100)) * 2.0) :
    freq < 500 ? (1.5 - (log10(freq)/log10(500)) * 0.5) :
    freq < 1000 ? 1.0 :
    freq < 5000 ? (1.0 + (log10(freq)/log10(5000)) * 0.7) :
    freq < 10000 ? (1.7 - (log10(freq)/log10(10000)) * 0.2) :
    1.5;
);

@slider
mix = slider1/100;
output_gain = 10^(slider2/20);

// Calculate filter coefficients with dynamic equal loudness compensation
i = 0;
while(i < 31) (
    freq = freqs[i];
    base_comp = calculate_loudness_compensation(freq);
    
    // Динамическая компенсация в зависимости от уровня mix
    comp_level = mix * base_comp;
    
    // Применяем компенсацию к каждой полосе
    slider_val = slider(i+3);
    gains[i] = slider_val * (1 + comp_level);
    
    i += 1;
);

@sample
input = spl0;
processed = input;

i = 0;
while(i < 31) (
    freq = freqs[i];
    a = exp(-2*$pi*freq/srate);
    bufs[i] = bufs[i] * a + (processed - (i > 0 ? bufs[i-1] : 0)) * (1-a);
    processed = bufs[i] * gains[i];
    i += 1;
);

processed *= output_gain;
spl0 = input * (1-mix) + processed * mix;
spl1 = spl0;

@gfx 800 400
gfx_clear = 0;
gfx_r = 0; gfx_g = 0.5; gfx_b = 1;
gfx_x = 0; gfx_y = 200;

// Draw frequency response
i = 0;
while (i < gfx_w) (
    freq = 20*pow(20000/20, i/gfx_w);
    resp = 0;
    
    band = 0;
    while(band < 30 && freq >= freqs[band]) (
        band += 1;
    );
    
    resp = 20*log10(gains[band]);
    
    gfx_lineto(i, 200 - resp*4);
    i += 1;
);

// Draw frequency labels
gfx_r = 1; gfx_g = 1; gfx_b = 1;
i = 0;
while(i < 31) (
    x = log(freqs[i]/20) / log(1000) * gfx_w;
    gfx_x = x;
    gfx_y = 380;
    gfx_drawnumber(freqs[i], 0);
    gfx_drawchar('H');
    gfx_drawchar('z');
    i += 1;
);
