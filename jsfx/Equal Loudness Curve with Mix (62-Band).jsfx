desc: Equal Loudness Curve with Mix (62-Band)
//author: Claude
//tags: equalizer

slider1:mix=50<0,100,1>Mix (%)

@slider
mix_norm = mix/100;

@init
// 62-band frequencies (Hz)
freqs[0] = 20;     gains[0] = -2;     q[0] = 1.4;
freqs[1] = 22;     gains[1] = -1.8;   q[1] = 1.4;
freqs[2] = 25;     gains[2] = -1;     q[2] = 1.4;
freqs[3] = 28;     gains[3] = -0.5;   q[3] = 1.4;
freqs[4] = 31.5;   gains[4] = 0;      q[4] = 1.4;
freqs[5] = 35;     gains[5] = 0.3;    q[5] = 1.4;
freqs[6] = 40;     gains[6] = 0.5;    q[6] = 1.4;
freqs[7] = 45;     gains[7] = 0.8;    q[7] = 1.4;
freqs[8] = 50;     gains[8] = 1;      q[8] = 1.4;
freqs[9] = 56;     gains[9] = 1.3;    q[9] = 1.4;
freqs[10] = 63;    gains[10] = 1.5;   q[10] = 1.4;
freqs[11] = 70;    gains[11] = 1.8;   q[11] = 1.4;
freqs[12] = 80;    gains[12] = 2;     q[12] = 1.4;
freqs[13] = 90;    gains[13] = 2.3;   q[13] = 1.4;
freqs[14] = 100;   gains[14] = 2.5;   q[14] = 1.4;
freqs[15] = 112;   gains[15] = 2.8;   q[15] = 1.4;
freqs[16] = 125;   gains[16] = 3;     q[16] = 1.4;
freqs[17] = 140;   gains[17] = 3.3;   q[17] = 1.4;
freqs[18] = 160;   gains[18] = 3.5;   q[18] = 1.4;
freqs[19] = 180;   gains[19] = 3.8;   q[19] = 1.4;
freqs[20] = 200;   gains[20] = 4;     q[20] = 1.4;
freqs[21] = 224;   gains[21] = 4.3;   q[21] = 1.4;
freqs[22] = 250;   gains[22] = 4.5;   q[22] = 1.4;
freqs[23] = 280;   gains[23] = 4.7;   q[23] = 1.4;
freqs[24] = 315;   gains[24] = 4.8;   q[24] = 1.4;
freqs[25] = 355;   gains[25] = 4.9;   q[25] = 1.4;
freqs[26] = 400;   gains[26] = 5;     q[26] = 1.4;
freqs[27] = 450;   gains[27] = 4.9;   q[27] = 1.4;
freqs[28] = 500;   gains[28] = 4.8;   q[28] = 1.4;
freqs[29] = 560;   gains[29] = 4.7;   q[29] = 1.4;
freqs[30] = 630;   gains[30] = 4.5;   q[30] = 1.4;
freqs[31] = 710;   gains[31] = 4.3;   q[31] = 1.4;
freqs[32] = 800;   gains[32] = 4;     q[32] = 1.4;
freqs[33] = 900;   gains[33] = 3.8;   q[33] = 1.4;
freqs[34] = 1000;  gains[34] = 3.5;   q[34] = 1.4;
freqs[35] = 1120;  gains[35] = 3.3;   q[35] = 1.4;
freqs[36] = 1250;  gains[36] = 3;     q[36] = 1.4;
freqs[37] = 1400;  gains[37] = 2.5;   q[37] = 1.4;
freqs[38] = 1600;  gains[38] = 2;     q[38] = 1.4;
freqs[39] = 1800;  gains[39] = 1.5;   q[39] = 1.4;
freqs[40] = 2000;  gains[40] = 1;     q[40] = 1.4;
freqs[41] = 2240;  gains[41] = 0.5;   q[41] = 1.4;
freqs[42] = 2500;  gains[42] = 0;     q[42] = 1.4;
freqs[43] = 2800;  gains[43] = -0.5;  q[43] = 1.4;
freqs[44] = 3150;  gains[44] = -1;    q[44] = 1.4;
freqs[45] = 3550;  gains[45] = -1.5;  q[45] = 1.4;
freqs[46] = 4000;  gains[46] = -2;    q[46] = 1.4;
freqs[47] = 4500;  gains[47] = -2.5;  q[47] = 1.4;
freqs[48] = 5000;  gains[48] = -3;    q[48] = 1.4;
freqs[49] = 5600;  gains[49] = -3.5;  q[49] = 1.4;
freqs[50] = 6300;  gains[50] = -4;    q[50] = 1.4;
freqs[51] = 7100;  gains[51] = -4.5;  q[51] = 1.4;
freqs[52] = 8000;  gains[52] = -5;    q[52] = 1.4;
freqs[53] = 9000;  gains[53] = -5.5;  q[53] = 1.4;
freqs[54] = 10000; gains[54] = -6;    q[54] = 1.4;
freqs[55] = 11200; gains[55] = -6.5;  q[55] = 1.4;
freqs[56] = 12500; gains[56] = -7;    q[56] = 1.4;
freqs[57] = 14000; gains[57] = -7.5;  q[57] = 1.4;
freqs[58] = 16000; gains[58] = -8;    q[58] = 1.4;
freqs[59] = 18000; gains[59] = -8.5;  q[59] = 1.4;
freqs[60] = 20000; gains[60] = -9;    q[60] = 1.4;
freqs[61] = 22050; gains[61] = -9.5;  q[61] = 1.4;

band_count = 62;

// Initialize filter states
memset(x1l, 0, band_count);
memset(x2l, 0, band_count);
memset(y1l, 0, band_count);
memset(y2l, 0, band_count);
memset(x1r, 0, band_count);
memset(x2r, 0, band_count);
memset(y1r, 0, band_count);
memset(y2r, 0, band_count);

function calc_eq_coeffs(freq, q, gain_db)
local(A, w0, alpha, b0, b1, b2, a0, a1, a2)
(
 A = pow(10, gain_db/40);
 w0 = 2 * $pi * freq/srate;
 alpha = sin(w0)/(2*q);

 b0 = 1 + alpha*A;
 b1 = -2*cos(w0);
 b2 = 1 - alpha*A;
 a0 = 1 + alpha/A;
 a1 = -2*cos(w0);
 a2 = 1 - alpha/A;

 b0 /= a0;
 b1 /= a0;
 b2 /= a0;
 a1 /= a0;
 a2 /= a0;
);

@sample
dry_l = spl0;
dry_r = spl1;
wet_l = spl0;
wet_r = spl1;

i = 0;
loop(band_count,
 calc_eq_coeffs(freqs[i], q[i], gains[i] * mix_norm);
 
 // Left channel
 outl = b0*wet_l + b1*x1l[i] + b2*x2l[i] - a1*y1l[i] - a2*y2l[i];
 x2l[i] = x1l[i];
 x1l[i] = wet_l;
 y2l[i] = y1l[i];
 y1l[i] = outl;
 wet_l = outl;
 
 // Right channel
 outr = b0*wet_r + b1*x1r[i] + b2*x2r[i] - a1*y1r[i] - a2*y2r[i];
 x2r[i] = x1r[i];
 x1r[i] = wet_r;
 y2r[i] = y1r[i];
 y1r[i] = outr;
 wet_r = outr;
 
 i += 1;
);

spl0 = dry_l * (1-mix_norm) + wet_l * mix_norm;
spl1 = dry_r * (1-mix_norm) + wet_r * mix_norm;
